# -*- coding: utf-8 -*-
"""TA Week 9 Session 2 OOPipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TTj2xaPWDRbETG0M0nKT3SbJyoIMnLWi
"""

# Class Exercise Week 9 Day 2
# Animal class with name, sound ,and genus as attributes
class Animal:
    def __init__(self, name, sound, genus):
        self.name = name
        self.sound = sound
        self.__genus = genus

    def make_sound(self):
        print(f"{self.name} ({self.__genus}) says {self.sound}")

    def get_genus(self):
        return self.__genus


# Part 1 : Inheritance
class Dog(Animal):
    def __init__(self, name):
        # Call the constructor of the parent class (Animal)
        super().__init__(name, "Woof", "Canine")


class Cat(Animal):
    def __init__(self, name):
        super().__init__(name, "Meow", "Feline")


class Bird(Animal):
    def __init__(self, name, sound="Tweet"):  # Default sound for birds is "Tweet"
        super().__init__(name, sound, "Avian")


# Part 2 and 3 : Encapsulation and Abstraction
class Zoo:
    def __init__(self):
        self.animals = []

    def add_animal(self, animal, sound=None):
        # Part 4 : Polymorphism
        if isinstance(animal, Animal):
            # If sound is provided, override the default sound
            if sound is not None:
                animal.sound = sound
            self.animals.append(animal)
            print(f"{animal.name} added to the zoo.")
        else:
            print("Invalid animal type.")

    def make_all_sounds(self):
        for animal in self.animals:
            animal.make_sound()


# Testing the code by creating new instance of the classes
dog = Dog("Buddy")
cat = Cat("Whiskers")
parrot = Bird("Polly")  # Adding a bird to the inheritance hierarchy
other_animal = "Fish"  # for testing invalid type

# Creating a zoo unit for the classes
zoo = Zoo()

# Adding animals to the unit with optional sound parameter
zoo.add_animal(dog)
zoo.add_animal(cat)
zoo.add_animal(parrot, sound="Chirp")  # Providing a specific sound for the parrot
zoo.add_animal(other_animal)  # This will print "Invalid animal type."


# Making all animals in the zoo make sounds
zoo.make_all_sounds()

# Accessing the private genus variable through a public method
print(f"The genus of {parrot.name} is {parrot.get_genus()}")